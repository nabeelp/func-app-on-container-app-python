name: Deploy Function App to Container App

on:
    workflow_dispatch:

permissions:
    id-token: write
    contents: read

env:
    RESOURCE_GROUP: "rg-pyt001"
    LOCATION: "southafricanorth"

jobs:
    deploy:
        runs-on: ubuntu-latest
        environment: dev

        steps:
            - uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v2
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: Create Resource Group if not exists
              run: |
                if ! az group exists --name ${{ env.RESOURCE_GROUP }}; then
                    az group create --name ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
                fi

            - name: Deploy Bicep Infrastructure
              id: deploy-bicep
              run: |
                az deployment group create \
                    --name func-app-container-deploy-${{ github.run_number }} \
                    --resource-group ${{ env.RESOURCE_GROUP }} \
                    --template-file ./infra/main.bicep \
                    --what-if

                az deployment group create \
                    --name func-app-container-deploy-${{ github.run_number }} \
                    --resource-group ${{ env.RESOURCE_GROUP }} \
                    --template-file ./infra/main.bicep

                az deployment group wait \
                    --name func-app-container-deploy-${{ github.run_number }} \
                    --resource-group ${{ env.RESOURCE_GROUP }} \
                    --created

                # Get ACR login server
                ACR_LOGIN_SERVER=$(az deployment group show \
                    --name func-app-container-deploy-${{ github.run_number }} \
                    --resource-group ${{ env.RESOURCE_GROUP }} \
                    --query properties.outputs.acrLoginServer.value \
                    -o tsv)
                echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
                echo "Function App deployment completed and ACR login server retrieved: $ACR_LOGIN_SERVER"

            - name: Build and Push Docker Image
              run: |
                # Login to ACR
                az acr login -n crpyt001
                
                # Build and tag the image
                docker build ./src -t ${ACR_LOGIN_SERVER}/python-function-app:${{ github.sha }}
                
                # Push to ACR
                docker push ${ACR_LOGIN_SERVER}/python-function-app:${{ github.sha }}
                
                echo "Docker image pushed to ACR: ${ACR_LOGIN_SERVER}/python-function-app:${{ github.sha }}"

            - name: Get Function App Name
              id: get-func-app-name
              run: |
                FUNC_APP_NAME=$(az functionapp list -g ${{ env.RESOURCE_GROUP }} --query "[0].name" -o tsv)
                echo "FUNC_APP_NAME=$FUNC_APP_NAME" >> $GITHUB_ENV
                echo "Retrieved Function App name: $FUNC_APP_NAME"

            - name: Update Function App Container Image
              run: |
                az functionapp config container set \
                    --name ${{ env.FUNC_APP_NAME }} \
                    --resource-group ${{ env.RESOURCE_GROUP }} \
                    --image ${ACR_LOGIN_SERVER}/python-function-app:${{ github.sha }}
                
                echo "Function App container image updated to: ${ACR_LOGIN_SERVER}/python-function-app:${{ github.sha }}"
